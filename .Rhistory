devtools::update_packages("celltracktech")
usethis::create_from_github(
"https://github.com/ewildey93/Rabbits.git",
destdir = "C:/Users/eliwi/OneDrive/Documents/R/Rabbits"
)
load("C:/Users/eliwi/OneDrive/Documents/R/AtlasTest/.RData")
install.packages('textshaping')
?nls
library(devtools)
?install_github
remotes::install_github("glmmTMB/glmmTMB",subdir="glmmTMB")
remove.packages("cli")
remove.packages("Rcpp")
remove.packages("TMB")
remove.packages("lme4")
remove.packages("glmmTMB")
myout <- "C:/Users/eliwi/OneDrive/Documents/Supercomputer"
myfiles <- list.files(file.path(myout, "nodes"),
pattern="gps",recursive = TRUE, full.names = TRUE)
?lapply()
myfiles <- myfiles[1:5]
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/Data",pattern = ".csv",full.names = FALSE)
listnames <- gsub(listnames,pattern = ".csv", replacement = "")
Nodegps <- lapply(myfiles, function (x) read_csv(x), assign(listnames))
?assing
?assign
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/Data",pattern = ".csv",full.names = FALSE)
listnames <- gsub(listnames,pattern = ".csv", replacement = "")
myfiles
lsitnames
listnames
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/Supercomputer/node",pattern = "gps",recursive=T,full.names = FALSE)
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes",pattern = "gps",recursive=T,full.names = FALSE)
listnames <- gsub(listnames,pattern = ".csv", replacement = "")
listnames <- listnames[1:5]
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes",pattern = "gps",recursive=T,full.names = FALSE)
listnames <- gsub(listnames,pattern = "/gps.csv", replacement = "")
listnames <- listnames[1:5]
Nodegps <- lapply(myfiles, function (x) read_csv(x), assign(x,listnames))
Nodegps <- lapply(myfiles, function (x) assign(listnames,read_csv(x))
Nodegps <- lapply(myfiles, function (x) assign(listnames,read_csv(x)))
library(read_csv)
library(readr)
Nodegps <- lapply(myfiles, function (x) assign(listnames,read_csv(x)))
View(Nodegps)
for(i in 1:length(myfiles)) assign(listnames[i], read_csv(myfiles[i]))
list <- lapply(myfiles, function (x) read_csv(x))
View(list)
names(list) <- listnames
View(list)
View(list)
list[["3383CA"]][["Time"]]
View(`338FB0`)
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) Nodegps[Latitude > 38.489  & Latitude < 38.513 ])
Nodegps <- lapply(Nodegps, function (x) x[x$Latitude > 38.489  & x$Latitude < 38.513 ])
Nodegps <- lapply(Nodegps, function (x) x[x$Latitude > 38.489  & x$Latitude < 38.513, ])
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) x[x$Longitude > -106.036  & x$Longitude < -106.008,])
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) {attributes(x$Time)$tzone <- "America/Denver"
;x})
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) mutate(x,Date=as.Date(Time)))
library(dplyr)
Nodegps <- lapply(Nodegps, function (x) mutate(x,Date=as.Date(Time)))
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) round(x[,c('Latitude','Longitude')],4))
View(Nodegps)
?round
Nodegps <- lapply(myfiles, function (x) read_csv(x))
names(Nodegps) <- listnames
Nodegps <- lapply(Nodegps, function (x) x[x$Latitude > 38.489  & x$Latitude < 38.513, ])
Nodegps <- lapply(Nodegps, function (x) x[x$Longitude > -106.036  & x$Longitude < -106.008,])
Nodegps <- lapply(Nodegps, function (x) {attributes(x$Time)$tzone <- "America/Denver"
;x})
Nodegps <- lapply(Nodegps, function (x) mutate(x,Date=as.Date(Time)))
Nodegps <- lapply(Nodegps, function (x) round(x[,c('Latitude','Longitude')],4);x)
Nodegps <- lapply(Nodegps[,c('Latitude','Longitude')], function (x) round(x,4))
?rbindlist
library(data.table)
?rbindlist
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
?distinct
head(NodeGPS)
NodeGPS <- distinct(NodeGPS, .id, Latitude, Longitude, Date)
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- distinct(NodeGPS, .id, Latitude, Longitude, Date, .keep_all = TRUE)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
hist(NodeGPS$difLat, na.rm=T)
range(NodeGPS$difLat)
range(NodeGPS$difLat, na.rm=T)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 & NodeGPS$difLong > .0002]
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 & NodeGPS$difLong > .0002,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat =NA & NodeGPS$difLong > .0002 |NodeGPS$difLong = NA,]
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == NA & NodeGPS$difLong > .0002 |NodeGPS$difLong == NA,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == NA & NodeGPS$difLong > .0002 |NodeGPS$difLong == NA,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
str(NodeGPS)
NodeGPS <- NodeGPS[NodeGPS$difLat !< .0002  & NodeGPS$difLong !< .0002 ,]
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == NA ,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
str(NodeGPS)
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0,]
View(NodeGPS)
NodeGPS <- NodeGPS[NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0 &
NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0 ,]
NodeGPS <- NodeGPS[NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
head(NodeGPS)
Dates <- seq.POSIXt("2021-10-10", "2021-12-17",by = 1)
str(NodeGPS)
Dates <- seq.POSIXct("2021-10-10", "2021-12-17",by = 1)
Dates <- seq.Date("2021-10-10", "2021-12-17",by = 1)
Dates <- seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17",by = 1))
Dates <- seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17"),by = 1)
?if
if(Dates[i]== NodesGPS$Date){Dates[i] <- as.data.frame(.id=character(), Time=as.POSIXct(),
Latitude=numeric(), Longitude=numeric())
Dates[i] <- rbind(Dates[i], NodeGPS[i])}
if(Dates[i]== NodeGPS$Date){Dates[i] <- as.data.frame(.id=character(), Time=as.POSIXct(),
Latitude=numeric(), Longitude=numeric())
Dates[i] <- rbind(Dates[i], NodeGPS[i])}
?left_join
?left_join.data.frame
Dates <- as.data.frame(Date=seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17"),by = 1))
Dates <- data.frame(Date=seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17"),by = 1))
View(Dates)
?merge
NodesbyDate <- merge(NodeGPS, Dates, by="Date", all.y = TRUE)
View(NodesbyDate)
?distinct
NodeGPS <- distinct(NodeGPS, .id,  Latitude, Longitude, Date)
NodesbyDate <- merge(NodeGPS, Dates, by="Date", all.y = TRUE)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0 ,]
NodeGPS <- NodeGPS[NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
NodeGPS <- distinct(NodeGPS, .id,  Latitude, Longitude, Date, .keep_all = TRUE)
NodesbyDate <- merge(NodeGPS, Dates, by="Date", all.y = TRUE)
?split
NodesbyDateList <- split(NodesbyDate, by=Date)
NodesbyDateList <- split(NodesbyDate, by="Date")
NodesbyDateList <- split(NodesbyDate, "Date")
View(NodesbyDateList)
NodesbyDate$Date <- as.factor(NodesbyDate$Date)
NodesbyDateList <- split(NodesbyDate, "Date")
NodesbyDateList <- split(NodesbyDate, f=NodesbyDate$Date)
View(NodesbyDateList)
15675-13623
3517.09-2171.16
e <-  list.files(file.path(myout, "nodes"), pattern="beep",recursive = TRUE, full.names = TRUE)
myout <- "C:/Users/eliwi/OneDrive/Documents/Supercomputer"
e <-  list.files(file.path(myout, "nodes"), pattern="beep",recursive = TRUE, full.names = TRUE)
e
df <- read_csv("C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes/33B32D/beep_0.csv")
library(readr)
df <- read_csv("C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes/33B32D/beep_0.csv")
df[209370,]
badlines <- grep("[^ -~]", df$time)
if (length(badlines) > 0) { df <- df[-badlines,]}
badlines <- grep("[[:digit:]]-", df$time, invert=TRUE)
badlines <- grep("[^ -~]", df$id)
if (length(badlines) > 0) { df <- df[-badlines,]}
#badlines <- grep("[[:digit:]]-", df$id, invert=TRUE)
#if (length(badlines) > 0) { df <- df[-badlines,]}
df <- df[complete.cases(df),]
?Postgres
library (spaceNtime)
library(dplyr)
library(data.table)
library(amt)
library(tidyverse)
setwd("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE")
#Need dataframe with capture history that has 3 columns: cam-unique ID for camera,
#datetime  that has date and time of photo and count that has count of study species
#although this only matters for IS not TTE (or STE)
camdf <- read.csv("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE/images.csv")
df <- camdf[camdf$common_name=="Mule Deer",]
df <- df[,c(2,16,17,22)]
colnames(df) <- c("cam","datetime","count","comments")
df$datetime <- as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S", tz="America/Denver")
#fawns?
df <- filter(df, !(count==1 & comments== "fawn"))
#replace BUSH3 with BUSH4
BUSH3 <- which(df$cam == "BUSH3")
df$cam <- replace(x = df$cam,list=BUSH3, values = "BUSH4")
df$cam <- as.factor(df$cam)
#Need a deploy dataframe with active periods and area
#if camera went offline and came back on need multiple rows *check this
deploy <- read.csv("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE/deployments.csv")
deploy <- deploy[,c(2,6,7,10)]
colnames(deploy) <- c("Camera","start","end","featuretype")
DTimes <- read.csv("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE/DeploymentTimes.csv")
DeployFeatures <- deploy[,c(1,4)]
#entered BUSH4 as BUSH3 on Wildlife Insights , BUSH3 camera stolen
DeployFeatures$Camera <- replace(x = DeployFeatures$Camera,list=10, values = "BUSH4")
deploy2 <- left_join(DTimes, DeployFeatures, by="Camera")
#need area covered by camera viewshed, 45m2 pulled from Loonam et al.2020 supplemental info
deploy2$area <- 45
deploy2$Start<- as.POSIXct(deploy2$Start,format="%m/%d/%Y %H:%M:%S", tz="America/Denver")
deploy2$End<- as.POSIXct(deploy2$End,format="%m/%d/%Y %H:%M:%S", tz="America/Denver")
#sampling period
per <- tte_samp_per(deploy2, lps = 1.76/60)
#sampling occasion
study_dates <- as.POSIXct(c("2022-04-15 00:00:00", "2022-08-15 23:59:59"), tz = "America/Denver")
occ <- tte_build_occ(
per_length = per,
nper = 24,
time_btw = 2 * 3600,
study_start = study_dates[1],
study_end = study_dates[2]
)
#build encounter history
colnames(deploy2)[c(1:3)] <- c("cam", "start", "end")
deploy2$cam <- as.factor(deploy2$cam)
tte_eh <- tte_build_eh(df=df, deploy=deploy2, occ=occ,  samp_per=per)
#for density by camera
tte_ehlist <- split(tte_eh, f=tte_eh$cam)
estNlist <- lapply(tte_ehlist, function (x) tryCatch(tte_estN_fn(x, study_area = 0.152909e6), error=function(e) NULL))
View(estNlist)
RndSteps5 <- readRDS("C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/RndSteps5.rds")
Used <- RNdSteps5[RndSteps5$case == 1,]
Used <- RndSteps5[RndSteps5$case == 1,]
str(Used)
View(Used)
UsedList <- split(Used, f="column_label")
Used <- Used[, c(1,3,5,9)]
UsedList <- split(Used, f="column_label")
Used <- RndSteps5[RndSteps5$case == 1,]
1767*21
Used <- Used[, c(1,3,5,9)]
UsedList <- split(Used, f="column_label")
View(Used)
View(UsedList)
UsedList <- split(Used, f=Used$column_label)
?outlie
library(ctmm)
?outlie
str(Used)
MoveList <- lapply(UsedList, function (x) move(x=x$x1_, y=y1_, time=t1_, data=x, proj=CRS("+init=epsg:4326")))
library(move)
library(ctmm)
MoveList <- lapply(UsedList, function (x) move(x=x$x1_, y=y1_, time=t1_, data=x, proj=CRS("+init=epsg:4326")))
MoveList <- lapply(UsedList, function (x) move(x=x$x1_, y=x$y1_, time=x$t1_, data=x, proj=CRS("+init=epsg:4326")))
warnings()
View(MoveList)
?as.telemetry
TelemList <- lapply(MoveList, function (x) as.telemetry(x,timeformat = "",timezone = "", projection=NULL,datum=NULL,timeout=Inf,na.rm = "col",mark.rm = FALSE, keep=FALSE,drop=TRUE))
sys.time()
Sys.time()
MoveList[["F46538"]]@proj4string
?move
MoveList <- lapply(UsedList, function (x) move(x=x$x1_, y=x$y1_, time=x$t1_, data=x, proj=CRS("+init=epsg:32613")))
warnings()
TelemList <- lapply(MoveList, function (x) as.telemetry(x,timeformat = "",timezone = "America/Denver", projection=NULL,datum=NULL,timeout=Inf,na.rm = "col",mark.rm = FALSE, keep=FALSE,drop=TRUE))
Outliers <- lapply(TelemList, function (x) outlie (x))
View(Outliers)
plot(Outliers)
plot(Outliers[[1]])
plot(Outliers[[2]])
plot(Outliers[[3]])
plot(Outliers[[4]])
plot(Outliers[[5]])
plot(Outliers[[6]])
plot(Outliers[[7]])
plot(Outliers[[8]])
plot(Outliers[[9]])
?tte_build_occ
occ <- tte_build_occ(
per_length = per,
nper = 5,
time_btw = 2 * 3600,
study_start = study_dates[1],
study_end = study_dates[2]
)
tte_eh <- tte_build_eh(df=df, deploy=deploy2, occ=occ,  samp_per=per)
estNlist <- lapply(tte_ehlist, function (x) tryCatch(tte_estN_fn(x, study_area = 0.152909e6), error=function(e) NULL))
View(estNlist)
View(estNlist)
#tte_estN_fn(tte_eh[tte_eh$cam== "BUSH31",], study_area = 0.152909e6)
estN <- rbindlist(estNlist, idcol = T)
View(estN)
hist(estN$N)
library(fitdistrplus)
descdist(estN$N, discrete = FALSE)
Deer2 <- readRDS("C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/DeerList2.rds")
Deer2 <- rbindlist(Deer2, idcol=T)
View(Deer2)
str(Deer2)
Deer2 <- Deer2[, -c(9,10)]
UsedList <- split(Deer2, f=Deer2$.id)
MoveList <- lapply(UsedList, function (x) move(x=x$x1_, y=x$y1_, time=x$t1_, data=x, proj=CRS("+init=epsg:32613")))
MoveList <- lapply(UsedList, function (x) move(x=x$X, y=x$Y, time=x$DateTime, data=x, proj=CRS("+init=epsg:32613")))
View(UsedList)
UsedList <- lapply(UsedList, x[order(x$DateTime),])
MoveList <- lapply(UsedList, function (x) move(x=x$X, y=x$Y, time=x$DateTime, data=x, proj=CRS("+init=epsg:32613")))
UsedList <- lapply(UsedList, function (x) x[order(x$DateTime),])
MoveList <- lapply(UsedList, function (x) move(x=x$X, y=x$Y, time=x$DateTime, data=x, proj=CRS("+init=epsg:32613")))
TelemList <- lapply(MoveList, function (x) as.telemetry(x,timeformat = "",timezone = "America/Denver", projection=NULL,datum=NULL,timeout=Inf,na.rm = "col",mark.rm = FALSE, keep=FALSE,drop=TRUE))
Outliers <- lapply(TelemList, function (x) outlie (x))
vgList <- lapply(TelemList, function(x) variogram (x))
GUESSList <- lapply(x=TelemList, y=vgList, function (x,y) ctmm.guess (x,
variogram = y,
interactive = FALSE ))
GUESSList <- lapply(x=TelemList,y=vgList, function (x,y) ctmm.guess (x,
variogram = y,
interactive = FALSE ))
GUESSList <- lapply(x=TelemList,y=vgList, function (x) ctmm.guess (x,
variogram = vgList,
interactive = FALSE ))
GUESSList <- lapply(x=TelemList, function (x) ctmm.guess (x,
variogram = vgList,
interactive = FALSE ))
GUESSList <- lapply(x=TelemList, function (x) ctmm.guess (x,
variogram = vgList,
interactive = FALSE ))
GUESSList <- lapply(x=TelemList, function(x) ctmm.guess(x,
variogram = vgList,
interactive = FALSE ))
GUESSList <- lapply(TelemList, function(x) ctmm.guess(x,
variogram = vgList,
interactive = FALSE ))
GUESSList <- lapply(TelemList, function(x) ctmm.guess(x,variogram = vgList,interactive = FALSE ))
GUESSList <- lapply(TelemList, y=vgList, function(x,y) ctmm.guess(x,variogram = y,interactive = FALSE ))
View(vgList)
GUESSList <- lapply(TelemList, function(x) ctmm.guess(x,variogram = vgList,interactive = FALSE ))
?map
?mapply
?ctmm.guess
GUESSList <- mapply(ctmm.guess, data=TelemList, variogram=vgList,interactive=FALSE)
View(GUESSList)
GUESSList <- mapply(ctmm.guess, data=TelemList, variogram=vgList,interactive=FALSE, simplify=FALSE)
GUESSList <- mapply(ctmm.guess, data=TelemList, variogram=vgList,interactive=FALSE, SIMPLIFY=FALSE)
View(GUESSList)
GUESSList <- lapply(GUESSList, function (x) x$error <- TRUE;x)
GUESSList <- lapply(GUESSList, function (x) x$error <- TRUE)
View(GUESSList)
GUESSList <- mapply(ctmm.guess, data=TelemList, variogram=vgList,interactive=FALSE, SIMPLIFY=FALSE)
GUESSList <- lapply(GUESSList, function (x) x$error <- TRUE
return(x))
GUESSList <- lapply(GUESSList, function (x) x$error <- TRUE;
GUESSList <- lapply(GUESSList, function (x) x$error <- TRUE,
return(x))
GUESSList <- lapply(GUESSList, function (x) {x$error <- TRUE
return(x)
})
View(GUESSList)
?ctmm.select
FITSList <- mapply(ctmm.select, data=TelemList, CTMM=GUESSList, SIMPLIFY=FALSE)
View(TelemList)
View(GUESSList)
f <- ctmm.select(TelemList[["M48963"]], GUESSList[["M48963"]])
summary(f)
hist(log(estN$N))
descdist(log(estN$N), discrete = FALSE)
FITSList <- Map(function(x) ctmm.select(data = x,CTMM = y ), x=TelemList, y=GUESSList)
FITSList <- Map(function(x,y) ctmm.select(data = x,CTMM = y ), x=TelemList, y=GUESSList)
names(TelemList[[1]])
names(TelemList[1])
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[i], GUESSList[i])
FITSList <- append(FITSList, names(TelemList[i])=sel)
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[i], GUESSList[i])
FITSList <- append(FITSList, sel)
}
length(TelemList)
f <- ctmm.select(TelemList[[1]], GUESSList[[1]])
f <- ctmm.select(TelemList[1], GUESSList[1])
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[[i]], GUESSList[[i]])
FITSList <- append(FITSList, sel)
}
FITSList <- list()
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[[i]], GUESSList[[i]])
FITSList <- append(FITSList, sel)
}
View(TelemList)
View(FITSList)
rm(FITSList)
?ctmm.select
names(TelemList[1])
f <- ctmm.select(TelemList[2], GUESSList[2])
TelemList[2]
TelemList[[2]]
GuessList[2]
GUESSList[2]
GUESSList[[2]]
f <- ctmm.select(TelemList[2], GUESSList[2])
f <- ctmm.select(TelemList[[2]], GUESSList[[2]])
FITSList <- list()
TelemList <- TelemList[-2]
GUESSList <- GUESSList[-2]
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[[i]], GUESSList[[i]])
names(TelemList[i]) <- sel
}
FITSList <- list()
names <- names(TelemList)
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[[i]], GUESSList[[i]])
names(i) <- sel
}
name <- names(TelemList)
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[[i]], GUESSList[[i]])
name[i] <- sel
}
FITSList <- list()
for (i in 1:length(TelemList)) {
print(names(TelemList[i]))
sel <- ctmm.select(TelemList[[i]], GUESSList[[i]])
FITSList <- append(FITSList, sel)
}
View(FITSList)
?ctmm
?ctmm.guess
GUESSList <- mapply(ctmm.guess, data=TelemList, variogram=vgList,interactive=FALSE, SIMPLIFY=FALSE)
TelemList <- lapply(MoveList, function (x) as.telemetry(x,timeformat = "",timezone = "America/Denver", projection=NULL,datum=NULL,timeout=Inf,na.rm = "col",mark.rm = FALSE, keep=FALSE,drop=TRUE))
?ctmm.guess
?uere
?ctmm.select
abs(cores)
library(parallel)
detectCores()
GUESSList <- mapply(ctmm.guess, data=TelemList,CTMM=ctmm(error=10), variogram=vgList,interactive=FALSE, SIMPLIFY=FALSE)
?rep
GUESSList <- mapply(ctmm.guess, data=TelemList,CTMM=ctmm(error=rep(10, times=9)), variogram=vgList,interactive=FALSE, SIMPLIFY=FALSE)
View(TelemList)
Deer2 <- readRDS("C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/DeerList2.rds")
Deer2 <- rbindlist(Deer2, idcol=T)
Deer2 <- Deer2[, -c(9,10)]
View(Deer2)
Deer2 <- readRDS("C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/DeerList2.rds")
Deer2 <- rbindlist(Deer2, idcol=T)
View(Deer2)
str(Deer2)
Used <- Deer2%>%group_by(ID)%>%x[order(x$DateTime),]
Used <- Deer2%>%group_by(ID)%>%.[order(.$DateTime),]
?move
Move <- move(x=Used$X, y=Used$Y, time=Used$DateTime, data=Used,proj=CRS("+init=epsg:32613"),animal=Used$ID)
Used <- Deer2%>%group_by(ID)%>%.[order(.$DateTime),]%>%ungroup()
Move <- move(x=Used$X, y=Used$Y, time=Used$DateTime, data=Used,proj=CRS("+init=epsg:32613"),animal=Used$ID)
View(Used)
?order
Used <- arrange(Deer2, ID, DateTime)
Move <- move(x=Used$X, y=Used$Y, time=Used$DateTime, data=Used,proj=CRS("+init=epsg:32613"),animal=Used$ID)
